spring.mvc.pathmatch.matching-strategy=ant-path-matcher
# SSL (Secure Sockets Layer) and its successor, TLS (Transport Layer Security), 
# are protocols for establishing authenticated and encrypted links between networked computers.
spring.datasource.url = jdbc:mysql://localhost:3306/Security?useSSL=false
spring.datasource.username=root
spring.datasource.password=Kareli

# The dialect specifies the type of database used in hibernate so that hibernate generate 
# appropriate type of SQL statements.
# ORACLE
# org.hibernate.dialect.OracleDialect
# MYSQL
# org.hibernate.dialect.MySQLDialect
# org.hibernate.dialect.MySQLInnoDBDialect  (ACID: Atomicity, Consistency, Isolation, and Durability)
# org.hibernate.dialect.MySQLMyISAMDialect
# SQL SERVER
# org.hibernate.dialect.SQLServerDialect
# POSTGRESS
# org.hibernate.dialect.ProgressDialect
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

# create :- create the schema, the data previously present (if there) in the schema is lost
# update:- update the schema with the given values.
# validate:- validate the schema. It makes no change in the DB.
# create-drop:- create the schema with destroying the data previously present(if there). 
#                It also drop the database schema when the SessionFactory is closed.
spring.jpa.hibernate.ddl-auto=update

# INSERT VALUES USER TABLE 
# insert into user values (1,1,'123456','ROLE_USER','user1');
# insert into user values (2,1,'$2a$10$eZCGsc8EZRcQ.SbI7PshLelOta9jx6WUnkC4GLjpnEL/Pxu2Csm/W','ROLE_ADMIN,ROLE_USER','user2');
# insert into user values (3,1,'123456','ROLE_ADMIN,ROLE_USER','user3');
# insert into user values (4,1,'$2a$10$eZCGsc8EZRcQ.SbI7PshLelOta9jx6WUnkC4GLjpnEL/Pxu2Csm/W','ROLE_USER','user4');

